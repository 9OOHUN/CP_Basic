#include "io.h"

	// **2023. 11. 27.
	// **포인터

void PonterVar()
{
	/*
		& : 주소연산자 - 변수의 주소 표시
		* : 참조연산자
			- 포인터 변수 선언때 사용 / 주소를 담은 변수를 선언
			- 변수의 값 참조
	*/

	int a = 10; // a는 10의 값을 저장

	int* pa = &a; // pa는 a의 주소를 저장 -> 주소를 저장하는 것은 pa임(포인터 선언)

	// *의 경우, 포인터 변수 선언인지, 변수의 값인지도 구분해주면 좋음★★
	/*
		포인터 연산자 구분 사용
		- 포인터 변수 선언 : int* pa / int *pa 별이int에 붙는 것, 변수에 붙기도 함
		-> 주소라는 뜻

		- 참조 연산자 : (실제 값을 찾아가라) *pa
		-> 값이라는 뜻

		=> 두 개의 의미를 잘 구분해야 함
	*/

	cout << "a값 : " << a << endl; // = 10
	cout << "a주소 : " << pa << endl; // = 주소
	cout << "a주소 : " << &a << endl; // = 주소를 연산해서 출력 / & : 주소연산자
	cout << "a주소를 통해 값을 참조 : " << *pa << endl; // = 10(*수식에 사용은 참조연산자)

	// 주소값 길어서 16진수로 줄여서 표기 ex. 4byte 주소 2진법으로 32bit로
	// 16진수는 2^4로, 4bit를 한번에 표기 가능
	// ex. 대표적으로 컬러표현 16진수임, 0~9는 숫자로 표기, 10~16은 알파벳으로 표기
	// 그래서 컬러값 숫자와 알파벳 섞여 있는 것, 숫자랑 알파벳 섞이면 16진수임

	/*
		int** ppa : 포인터 변수의 주소를 담음
	*/

	int** ppa = &pa;

	cout << "pa포인터 변수의 주소 값 : " << ppa << endl; // <- 주소
	cout << "pa포인터 변수의 주소를 통해 값을 참조 : " << **ppa << endl; // <- 참조 연산자(변수값)
}

void PointerCalc()
{
	// 포인터 연산

	int a = 50;
	int* pa = &a; // <- 연산자 아님, 포인터 선언임

	cout << a + 1 << endl; // 51
	cout << pa + 1 << endl; // pa 주소 + 1 = a값 주소의 다음 칸
	cout << *pa + 1 << endl; // 51
	cout << *(pa + 1) << endl; // a값 주소 다음 칸의 값을 참조(찾아가라)
	// 엄밀히 말해 원래 +1(정수)은 정수가 1byte므로 바로 다음 칸은 아님
}

void PointerArray()
{
	int Array[3] = { 10,20,30 };
	int* pArray = Array;

	cout << pArray << endl; // 주소
	cout << Array << endl; // 주소

	cout << pArray[0] << endl; // 인덱스0번째
	cout << Array[0] << endl; // 인덱스 0번째

	cout << *Array << endl; // 참조연산, 인덱스 0번째
	cout << *pArray << endl; // 참조연산, 인덱스 0번째

	cout << *pArray+1 << endl; // 참조연산, 인덱스 0번째+1
	cout << *(pArray + 1) << endl; // 배열데이터의 두번째(1) 데이터가 나옴
	// ↑ pArray[1] 와 같음, 주소에 1 더한 값
}